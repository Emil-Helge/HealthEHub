@inject AuthenticationService AuthService

<MudNavLink Href="/" Icon="@Icons.Material.Filled.Home" IconColor="Color.Primary" Match="NavLinkMatch.All" Class="gap-1">
    <MudText Color="Color.Primary">
        Home
    </MudText>
</MudNavLink>
<MudNavLink Href="/exercises" Icon="@Icons.Material.Filled.FitnessCenter" IconColor="Color.Primary" Match="NavLinkMatch.All">
    <MudText Color="Color.Primary">
        Exercises
    </MudText>
</MudNavLink>
<MudNavLink Href="/contact" Icon="@Icons.Material.Filled.ContactMail" IconColor="Color.Primary" Match="NavLinkMatch.All">
    <MudText Color="Color.Primary">
        Contact
    </MudText>
</MudNavLink>
<MudNavLink Href="/faq" Icon="@Icons.Material.Filled.QuestionAnswer" IconColor="Color.Primary" Match="NavLinkMatch.All">
    <MudText Color="Color.Primary">
        FAQ
    </MudText>
</MudNavLink>

@if (AuthService.IsLoggedIn)
{
    <MudNavLink Href="/profile" Icon="@Icons.Material.Filled.AccountCircle" IconColor="Color.Primary" Match="NavLinkMatch.All">
        <MudText Color="Color.Primary">
            Profile
        </MudText>
    </MudNavLink>
}
else
{
    <MudNavLink Href="/login" Icon="@Icons.Material.Filled.Login" IconColor="Color.Primary" Match="NavLinkMatch.All">
        <MudText Color="Color.Primary">
            Log In
        </MudText>
    </MudNavLink>
}


@code {
    protected override void OnInitialized()
    {
        AuthService.OnLoginStateChanged += StateHasChanged;
    }

    // Unsubscribe from the event when the component is disposed to prevent memory leaks
    public void Dispose()
    {
        AuthService.OnLoginStateChanged -= StateHasChanged;
    }

    private void Logout()
    {
        AuthService.Logout();
    }
}

