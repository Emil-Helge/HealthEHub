@page "/exercises"
@inject HttpClient Http

<PageTitle>Exercises</PageTitle>

<MudItem xs="12">
    <FilterBar searchTerm="@searchTerm" searchTermChanged="@(value => searchTerm = value)" TargetMuscles="@TargetMuscles" OnTargetMuscleSelected="SetSelectedTargetMuscle" AllEquipment="@AllEquipment" OnEquipmentSelected="SetSelectedEquipment" BodyParts="@BodyParts" OnBodyPartSelected="SetSelectedBodyPart" OnSearch="HandleSearch" OnFormSubmit="HandleFormSubmit" OnClearFilters="ClearFilter" />
</MudItem>

<MudGrid>
    @if (displayedExercises is not null && displayedExercises.Count > 0)
    {
        @foreach (Exercise exercise in displayedExercises)
        {
            <MudItem xs="12" lg="6">
                <ExerciseCard exercise="exercise" />
            </MudItem>
        }
    }
    else
    {
        for (int i = 0; i < countPerPage; i++)
        {
            <MudItem xs="12" md="6" Style="padding: 0;">
                <ExerciseCard />
            </MudItem>
        }
    }

</MudGrid>
<MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="LoadMoreExercises">Load More </MudButton>

@code {
    private string[]? AllEquipment;
    private string selectedEquipment = string.Empty;
    private string[]? TargetMuscles;
    private string selectedTargetMuscle = string.Empty;

    private string[]? BodyParts;
    private string selectedBodyPart = string.Empty;

    private bool isSearching = false;

    private int countPerPage = 20;
    private int offset = 0;
    private int TotalExercises = 1300;
    private string searchTerm = string.Empty;
    private List<Exercise>? allExercises;
    private List<Exercise>? displayedExercises;

    protected override async Task OnInitializedAsync()
    {
        TargetMuscles = await Http.GetFromJsonAsync<string[]>("/targetmuscles");
        AllEquipment = await Http.GetFromJsonAsync<string[]>("/allequipment");

        await LoadExercises(offset, countPerPage);
        BodyParts = await Http.GetFromJsonAsync<string[]>("/bodyparts");
    }

    private async Task SetSelectedBodyPart(string bodyPart)
    {
        selectedEquipment = string.Empty;
        selectedTargetMuscle = string.Empty;
        selectedBodyPart = bodyPart;
        offset = 0;
        if (displayedExercises is not null)
        {
            displayedExercises.Clear();
        }
        await LoadMoreExercises();
    }

    private async Task SetSelectedEquipment(string equipment)
    {
        selectedBodyPart = string.Empty;
        selectedTargetMuscle = string.Empty;
        selectedEquipment = equipment;
        offset = 0;
        if (displayedExercises is not null)
        {
            displayedExercises.Clear();
        }
        await LoadMoreExercises();
    }

    private async Task SetSelectedTargetMuscle(string targetMuscle)
    {
        selectedBodyPart = string.Empty;
        selectedEquipment = string.Empty;
        selectedTargetMuscle = targetMuscle;
        offset = 0;
        if (displayedExercises is not null)
        {
            displayedExercises.Clear();
        }
        await LoadMoreExercises();
    }

    private async Task LoadExercises(int newOffset, int limit, string bodyPartFilter = "")
    {
        var requestUri = $"exercises?limit={limit}&offset={newOffset}";
        if (!string.IsNullOrEmpty(selectedBodyPart))
        {
            requestUri = $"exercises/bodyPart/{selectedBodyPart}?limit={limit}&offset={newOffset}";
        }
        else if (!string.IsNullOrEmpty(selectedEquipment))
        {
            requestUri = $"exercises/equipment/{selectedEquipment}?limit={limit}&offset={newOffset}";
        }
        else if (!string.IsNullOrEmpty(selectedTargetMuscle))
        {
            requestUri = $"exercises/target/{selectedTargetMuscle}?limit={limit}&offset={newOffset}";
        }

        var response = await Http.GetFromJsonAsync<List<Exercise>>(requestUri);
        if (response is not null)
        {
            if (displayedExercises == null)
            {
                displayedExercises = new List<Exercise>();
            }
            displayedExercises.AddRange(response);
            offset += response.Count;
        }
    }

    private async Task LoadMoreExercises()
    {
        if (isSearching)
        {
            var response = await Http.GetFromJsonAsync<List<Exercise>>($"/exercises/name/{searchTerm}?offset={offset}&limit={countPerPage}");
            if (response is not null)
            {
                displayedExercises.AddRange(response);
                offset += response.Count;
            }
        }
        else
        {
            await LoadExercises(offset, countPerPage);
        }
    }

    private async Task HandleSearch()
    {
        isSearching = !string.IsNullOrWhiteSpace(searchTerm);

        if (isSearching)
        {
            var response = await Http.GetFromJsonAsync<List<Exercise>>($"/exercises/name/{searchTerm}?offset={offset}&limit={countPerPage}");
            if (response is not null)
            {
                if (offset == 0)
                {
                    displayedExercises = response;
                }
                else
                {
                    displayedExercises.AddRange(response);
                }
                offset += response.Count;
            }
        }
        else
        {
            await LoadExercises(offset, countPerPage);
        }
    }


    private async Task HandleFormSubmit(string searchTerm)
    {
        this.searchTerm = searchTerm;

        if (displayedExercises is not null)
        {
            displayedExercises.Clear();
            offset = 0;
        }

        await HandleSearch();
    }



    private async Task ClearFilter()
    {
        selectedBodyPart = string.Empty;
        selectedEquipment = string.Empty;
        selectedTargetMuscle = string.Empty;
        searchTerm = string.Empty;
        isSearching = false;
        offset = 0;
        if (displayedExercises is not null)
        {
            displayedExercises.Clear();
        }
        await LoadExercises(offset, countPerPage);
    }

    private void FilterExercisesByBodyPart(string bodyPart)
    {
        if (allExercises is not null && !string.IsNullOrWhiteSpace(bodyPart))
        {
            displayedExercises = allExercises.Where(exercise =>
                exercise.BodyPart.Equals(bodyPart, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            displayedExercises = allExercises;
        }
    }

}
