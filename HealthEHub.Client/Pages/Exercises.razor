@page "/exercises"
@inject HttpClient Http

<PageTitle>Exercises</PageTitle>

<div class="container-xxl py-3">
    <ExerciseBodyPart BodyParts="@BodyParts" OnBodyPartSelected="SetSelectedBodyPart" />
    <form class="d-flex" @onsubmit="HandleSearch">
        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" @bind="searchTerm">
        <button class="btn btn-outline" type="submit">
            <i class="bi bi-search"></i>
        </button>
    </form>

    <button class="btn btn-primary" @onclick="LoadMoreExercises">Load More</button>
    <p>Selected Body Part: @selectedBodyPart</p>
    <button class="btn btn-secondary" @onclick="ClearBodyPartFilter">Clear Body Part Filter</button>
    <div class="d-flex flex-column justify-content-between my-3">
        <div class="row row-cols-2 row-cols-lg-4 row-cols-xl-5 g-3 justify-content-center justify-content-md-start">
            @if (displayedExercises is not null && displayedExercises.Count > 0)
            {
                @foreach (Exercise exercise in displayedExercises)
                {
                    <div class="col">
                        <ExerciseCard Exercise="exercise" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < countPerPage; i++)
                {
                    <div class="col">
                        <ExerciseCard />
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private int countPerPage = 20;
    private int offset = 0;
    private int TotalExercises = 1300;
    private string[]? BodyParts;
    private string selectedBodyPart = "";
    private string searchTerm = "";
    private List<Exercise>? allExercises;
    private List<Exercise>? displayedExercises;

    protected override async Task OnInitializedAsync()
    {
        await LoadExercises(offset, countPerPage);
        BodyParts = await Http.GetFromJsonAsync<string[]>("/bodyparts");
    }

    private async Task LoadExercises(int newOffset, int limit, string bodyPartFilter = "")
    {
        var requestUri = string.IsNullOrEmpty(bodyPartFilter)
            ? $"exercises?limit={limit}&offset={newOffset}"
            : $"exercises/bodyPart/{bodyPartFilter}?limit={limit}&offset={newOffset}";



        var response = await Http.GetFromJsonAsync<List<Exercise>>(requestUri);
        if (response is not null)
        {
            if (displayedExercises == null)
            {
                displayedExercises = new List<Exercise>();
            }
            displayedExercises.AddRange(response);
            offset += response.Count;
        }
    }

    private async Task LoadMoreExercises()
    {
        await LoadExercises(offset, countPerPage, selectedBodyPart);
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            displayedExercises = allExercises?.Where(exercise =>
                exercise.Name?.ToLower().Contains(searchTerm.ToLower()) == true ||
                exercise.Target?.ToLower().Contains(searchTerm.ToLower()) == true ||
                exercise.Equipment?.ToLower().Contains(searchTerm.ToLower()) == true ||
                exercise.BodyPart?.ToLower().Contains(searchTerm.ToLower()) == true
            ).ToList();
        }
        else
        {
            displayedExercises = allExercises;
        }
    }

    private async Task SetSelectedBodyPart(string bodyPart)
    {
        selectedBodyPart = bodyPart;
        offset = 0;
        if (displayedExercises is not null)
        {
            displayedExercises.Clear();
        }
        await LoadMoreExercises();
    }

    private async Task ClearBodyPartFilter()
    {
        selectedBodyPart = "";
        offset = 0;
        if (displayedExercises is not null)
        {
            displayedExercises.Clear();
        }
        await LoadExercises(offset, countPerPage);
    }

    private void FilterExercisesByBodyPart(string bodyPart)
    {
        if (allExercises is not null && !string.IsNullOrWhiteSpace(bodyPart))
        {
            displayedExercises = allExercises.Where(exercise =>
                exercise.BodyPart.Equals(bodyPart, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            displayedExercises = allExercises;
        }
    }

}
