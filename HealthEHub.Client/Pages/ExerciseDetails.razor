@page "/exercise/{id}"
@inject HttpClient Http


@if (exercise is not null)
{
    <PageTitle>Details for @exercise?.Name</PageTitle>
    <div class="hero-bg">
        <div class="hero-container">
            <div class="container-xxl d-flex flex-column flex-md-row">
                <div class="flex-grow-1 d-flex align-items-center justify-content-center justify-content-md-end">
                    <div class="title-container text-center text-md-end">
                        <h1>@exercise.Name</h1>
                    </div>
                </div>
                <div class="order-last order-md-first d-flex justify-content-center">
                    <div class="gif-container">
                        <img src="@exercise.GifUrl" alt="@exercise.Name" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container-xxl">
        <div class="details">
            <div class="instructions">
                <h4>Instructions</h4>
                @if (exercise.Instructions is not null)
                {
                    foreach (var instruction in exercise.Instructions)
                    {
                        <p class="instruction">@instruction</p>
                    }
                }
            </div>
            <div class="overview">
                <p>@exercise.BodyPart</p>
                <p>@exercise.Equipment</p>
                <p>@exercise.Target</p>
            </div>
            <div class="secondary-muscles">
                @if (exercise.SecondaryMuscles is not null)
                {
                    foreach (var muscle in exercise.SecondaryMuscles)
                    {
                        <p class="secondary-muscles">@muscle</p>
                    }
                }
            </div>

            @if (youtubeSearchResult?.Contents is not null)
            {
                @foreach (var content in youtubeSearchResult.Contents.Take(1))
                {
                    var video = content.Video;
                    <h4>@video.ChannelName</h4>
                    <div class="ratio ratio-16x9">
                        <iframe class="embed-responsive-item rounded" src="https://www.youtube.com/embed/@video.VideoId" allowfullscreen alt="@video.Title"></iframe>
                    </div>
                }
            }
            else
            {
                <p>No videos found.</p>
            }
        </div>
    </div>
}
else
{
    <p>Loading exercise details...</p>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private Exercise? exercise;
    private YoutubeSearchResult? youtubeSearchResult;

    protected override async Task OnInitializedAsync()
    {
        exercise = await Http.GetFromJsonAsync<Exercise>($"exercise/{Id}");
        if (exercise != null)
        {
            youtubeSearchResult = await Http.GetFromJsonAsync<YoutubeSearchResult>($"youtube/search?query={exercise.Name}");
        }
    }
}
