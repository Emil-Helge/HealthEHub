@page "/workoutplan/{WorkoutPlanId}"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>@(workoutPlan?.Name ?? "Loading Workout Plan...")</PageTitle>

<MudItem xs="12">
    <MudText Typo="Typo.h4" Align="Align.Center">
        Workout Plan: @workoutPlan?.Name
    </MudText>
</MudItem>

<MudItem xs="12">
    @if (_items == null || _items.Count == 0)
    {
        <MudText Typo="Typo.h5" Class="pa-4" Align="Align.Center">
            No exercises found. You can add exercises to your plan on the <MudLink Typo="Typo.h5" Color="Color.Info" Href="/exercises">exercises page</MudLink>.
        </MudText>
    }
    else
    {
        <MudDivider />
    }
</MudItem>

<MudItem xs="12">
    <MudStack Row>
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Disabled="@(_weekNumber <= 1)" OnClick="() => _weekNumber--">
            Previous
        </MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Disabled="@(_weekNumber >= 12)" OnClick="() => _weekNumber++">
            Next
        </MudButton>
        <MudSpacer />
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveChanges">Save</MudButton>
    </MudStack>
    <MudText Align="Align.Center" Typo="Typo.h5" Class="mx-4">
        Week @_weekNumber
    </MudText>
</MudItem>
<MudItem xs="12" md="5">
    <MudCard>
        <MudExpansionPanel Style="font-weight: 500;" Text=@($"Your Exercises ({_items.GroupBy(i => i.ExerciseId).Count()})")>
            @foreach (var item in _items.GroupBy(i => i.ExerciseId).Select(g => g.First()))
            {
                <MudListItem>
                    <MudText Class="py-2" Align="Align.Center">@item.Name</MudText>
                        <MudStack Row Justify="Justify.SpaceBetween">
                         <MudButton Size="Size.Small" Href=@($"/exercise/{item.ExerciseId}") Color="Color.Primary" Variant="Variant.Text">Details</MudButton>
                         <MudButton Size="Size.Small" Color="Color.Error" Variant="Variant.Text" OnClick="@(() => RemoveExercise(item))">Remove</MudButton>
                     </MudStack>
                 </MudListItem>
                <MudDivider />
            }
        </MudExpansionPanel>
    </MudCard>
</MudItem>
<MudItem xs="12" md="7">
    <MudCard>
        <MudList>
            @foreach (var day in daysOfWeekOrdered)
            {
                var exercisesForDay = _instancedItems.Where(i => i.DayOfWeek == day.ToString() && i.WeekNumber == _weekNumber).ToList();
                <MudExpansionPanel Dense="true" Style="font-weight: 500;" Text=@($"{day} ({exercisesForDay.Count})")>
                    @foreach (var exercise in exercisesForDay)
                    {
                        <MudListItem Dense="true">
                            <MudStack Justify="Justify.SpaceBetween" Class="flex-wrap">
                                <MudText Class="pa-1" GutterBottom Align="Align.Center">
                                     @exercise.Name
                                </MudText>
                                <MudStack Row>
                                 <MudText Class="pa-1" Typo="Typo.caption" GutterBottom>Sets: 3</MudText>
                                 <MudText Class="pa-1" Typo="Typo.caption" GutterBottom>Reps: 8</MudText>
                             </MudStack>
                         </MudStack>
                         <MudStack Row Justify="Justify.SpaceBetween">
                                 <MudButton Size="Size.Small" Href=@($"/exercise/{exercise.ExerciseId}") Color="Color.Primary" Variant="Variant.Text">Details</MudButton>
                                 <MudIconButton Size="Size.Small" Icon=@Icons.Material.Filled.Clear Color="Color.Error" OnClick="@(() => RemoveInstance(exercise))" />
                             </MudStack>
                             <MudStack Row Justify="Justify.Center">
                                 <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Primary" Variant="Variant.Text" OnClick="@(() => MoveUp(exercise))" />
                                 <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ArrowDownward" Color="Color.Primary" Variant="Variant.Text" OnClick="@(() => MoveDown(exercise))" />
                             </MudStack>
                         </MudListItem>
                        <MudDivider />

                    }
                    <MudButton FullWidth Class="mt-2" Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => AddExerciseToDay(day))">
                         Add Exercise
                     </MudButton>
                 </MudExpansionPanel>
            }
        </MudList>
    </MudCard>
</MudItem>
@code {
    [Parameter] public string? WorkoutPlanId { get; set; }
    private WorkoutPlan? workoutPlan;
    private int _weekNumber = 1;
    private List<SavedExercise> _items = new List<SavedExercise>();
    private List<SavedExercise> _instancedItems = new List<SavedExercise>();

    protected override async Task OnInitializedAsync()
    {
        workoutPlan = await Http.GetFromJsonAsync<WorkoutPlan>($"/workoutplan/{WorkoutPlanId}");

        if (workoutPlan?.Exercises != null)
        {
            var instancedItems = workoutPlan.Exercises
                .Where(e => !string.IsNullOrEmpty(e.InstanceId))
                .OrderBy(e => e.Order);

            var nonInstancedItems = workoutPlan.Exercises
                .Where(e => string.IsNullOrEmpty(e.InstanceId));

            _items = nonInstancedItems.ToList();
            _instancedItems = instancedItems.ToList();
        }
    }

    private async Task RemoveExercise(SavedExercise exercise)
    {
        var response = await Http.DeleteAsync($"/workoutplan/{WorkoutPlanId}/exercise/{exercise.ExerciseId}");

        if (response.IsSuccessStatusCode)
        {
            _items.RemoveAll(i => i.ExerciseId == exercise.ExerciseId);
            _instancedItems.RemoveAll(i => i.ExerciseId == exercise.ExerciseId);
            await SaveChanges();
        }
        else
        {
            Snackbar.Add("Failed to remove exercise. Please try again.", Severity.Error);
        }
    }

    private void RemoveInstance(SavedExercise instance)
    {
        _instancedItems.RemoveAll(i => i.InstanceId == instance.InstanceId);
        foreach (var day in daysOfWeekOrdered)
        {
            UpdateOrderForDay(day.ToString());
        }
        StateHasChanged();
    }


    private async Task SaveChanges()
    {
        var allItems = _items.Concat(_instancedItems).ToList();
        var response = await Http.PutAsJsonAsync($"/workoutplan/{WorkoutPlanId}", allItems);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Changes saved successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to save changes. Please try again.", Severity.Error);
        }
    }

    private readonly List<DayOfWeek> daysOfWeekOrdered = new List<DayOfWeek>
    {
        DayOfWeek.Monday,
        DayOfWeek.Tuesday,
        DayOfWeek.Wednesday,
        DayOfWeek.Thursday,
        DayOfWeek.Friday,
        DayOfWeek.Saturday,
        DayOfWeek.Sunday
    };

    private async Task AddExerciseToDay(DayOfWeek day)
    {
        var uniqueExercises = _items.GroupBy(i => i.ExerciseId).Select(g => g.First()).ToList();
        var dialog = DialogService.Show<SelectExerciseDialog>("Select an Exercise", parameters: new DialogParameters { { "Exercises", uniqueExercises } }, options: new DialogOptions { MaxWidth = MaxWidth.Small });
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SavedExercise selectedExercise)
        {
            var newInstance = new SavedExercise
                {
                    InstanceId = Guid.NewGuid().ToString(),
                    ExerciseId = selectedExercise.ExerciseId,
                    Name = selectedExercise.Name,
                    DayOfWeek = day.ToString(),
                    WeekNumber = _weekNumber,
                    Order = _instancedItems.Count(i => i.DayOfWeek == day.ToString())
                };

            _instancedItems.Add(newInstance);
            StateHasChanged();
        }
    }

    private void MoveUp(SavedExercise exercise)
    {
        if (exercise.DayOfWeek == null)
        {
            return;
        }

        var index = _instancedItems.IndexOf(exercise);
        if (index > 0 && _instancedItems[index - 1].DayOfWeek == exercise.DayOfWeek)
        {
            var temp = _instancedItems[index - 1];
            _instancedItems[index - 1] = exercise;
            _instancedItems[index] = temp;

            UpdateOrderForDay(exercise.DayOfWeek);
        }
    }

    private void MoveDown(SavedExercise exercise)
    {
        if (exercise.DayOfWeek == null)
        {
            return;
        }

        var index = _instancedItems.IndexOf(exercise);
        if (index < _instancedItems.Count - 1 && _instancedItems[index + 1].DayOfWeek == exercise.DayOfWeek)
        {
            var temp = _instancedItems[index + 1];
            _instancedItems[index + 1] = exercise;
            _instancedItems[index] = temp;

            UpdateOrderForDay(exercise.DayOfWeek);
        }
    }


    private void UpdateOrderForDay(string dayOfWeek)
    {
        var exercisesForDay = _instancedItems.Where(i => i.DayOfWeek == dayOfWeek).ToList();
        exercisesForDay = exercisesForDay.OrderBy(i => _instancedItems.IndexOf(i)).ToList();
        for (int i = 0; i < exercisesForDay.Count; i++)
        {
            exercisesForDay[i].Order = i;
        }
    }



}